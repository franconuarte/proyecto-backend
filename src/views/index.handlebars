<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.1/socket.io.js"></script>
</head>

<body>
    <p>Bienvenido, {{user.email}}!</p>
    <p>Tu rol es: {{user.role}}</p>
    <h2>Agregar Nuevo Producto</h2>
    <form id="productForm">
        <label for="title">Título:</label><br>
        <input type="text" id="title" name="title" required><br>
        <label for="description">Descripción:</label><br>
        <textarea id="description" name="description" required></textarea><br>
        <label for="price">Precio:</label><br>
        <input type="number" id="price" name="price" required><br>
        <label for="thumbnail">Thumbnail:</label><br>
        <input type="text" id="thumbnail" name="thumbnail" required><br>
        <label for="code">Código:</label><br>
        <input type="text" id="code" name="code" required><br>
        <label for="stock">Stock:</label><br>
        <input type="number" id="stock" name="stock" required><br>
        <button type="button" id="submitBtn">Agregar Producto</button>
    </form>

    <a href="/chat"><button>Comunicate con nosotros</button></a>
    <a href="/api/carts"><button>Ver Carrito</button></a>

    <h1>Lista de Productos en Tiempo Real</h1>
    <ul id="productList"></ul>

    <h1>Productos en tu Carrito</h1>
    <ul id="cartProducts"></ul>

    <button id="prevPageBtn">Página Anterior</button>
    <button id="nextPageBtn">Página Siguiente</button>

    <script>
        const socket = io();

        let currentPage = 1;
        let totalPages = 1;

        function deleteProduct(productId) {
            const confirmDelete = confirm('¿Estás seguro de que quieres eliminar este producto?');
            if (confirmDelete) {
                fetch(`/api/products/${productId}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error al eliminar producto');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Producto eliminado:', data);
                        fetchProductsAndUpdateList(currentPage);
                    })
                    .catch(error => console.error('Error al eliminar producto:', error));
            }
        }

        function addToCart(productId) {
            fetch(`/api/carts`, {
                method: 'POST'
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al crear carrito');
                    }
                    return response.json();
                })
                .then(cartData => {
                    const cartId = cartData._id;
                    fetch(`/api/carts/${cartId}/products`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId, quantity: 1 })
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Error al agregar producto al carrito');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Producto agregado al carrito:', data);
                            alert('Producto agregado al carrito');
                        })
                        .catch(error => console.error('Error al agregar producto al carrito:', error));
                })
                .catch(error => console.error('Error al crear carrito:', error));
        }

        function updateProductList({ payload: products, totalPages: tp, page: cp, prevPage, nextPage }) {
            totalPages = tp;
            currentPage = cp;
            const productList = document.getElementById('productList');
            productList.innerHTML = '';
            products.forEach(product => {
                const listItem = document.createElement('li');
                listItem.setAttribute('id', `product-${product._id}`);
                listItem.innerHTML = `
                    <strong>ID:</strong> ${product._id}<br>
                    <strong>Título:</strong> ${product.title}<br>
                    <strong>Descripción:</strong> ${product.description}<br>
                    <strong>Precio:</strong> ${product.price}<br>
                    <strong>Thumbnail:</strong> ${product.thumbnail}<br>
                    <strong>Código:</strong> ${product.code}<br>
                    <strong>Stock:</strong> ${product.stock}<br>
                    <button onclick="deleteProduct('${product._id}')">Eliminar</button>
                    <button onclick="addToCart('${product._id}')">Agregar al carrito</button><br><br>
                `;
                productList.appendChild(listItem);
            });

            document.getElementById('prevPageBtn').disabled = !prevPage;
            document.getElementById('nextPageBtn').disabled = !nextPage;
        }

        function fetchProductsAndUpdateList(page = 1) {
            fetch(`/api/products?limit=5&page=${page}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al obtener productos');
                    }
                    return response.json();
                })
                .then(data => {
                    updateProductList(data);
                })
                .catch(error => console.error('Error al obtener productos:', error));
        }

        function fetchCartProductsAndUpdateList() {
            fetch(`/api/carts`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al obtener carrito');
                    }
                    return response.json();
                })
                .then(data => {
                    const cartProductList = document.getElementById('cartProducts');
                    cartProductList.innerHTML = '';
                    data.products.forEach(product => {
                        const listItem = document.createElement('li');
                        listItem.textContent = `${product.productId.title} - ${product.productId.price}`;
                        cartProductList.appendChild(listItem);
                    });
                })
                .catch(error => console.error('Error al obtener productos del carrito:', error));
        }


        document.getElementById('prevPageBtn').addEventListener('click', () => {
            if (currentPage > 1) {
                fetchProductsAndUpdateList(currentPage - 1);
            }
        });

        document.getElementById('nextPageBtn').addEventListener('click', () => {
            if (currentPage < totalPages) {
                fetchProductsAndUpdateList(currentPage + 1);
            }
        });

        document.getElementById('submitBtn').addEventListener('click', () => {
            const productData = {
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                price: document.getElementById('price').value,
                thumbnail: document.getElementById('thumbnail').value,
                code: document.getElementById('code').value,
                stock: document.getElementById('stock').value
            };

            fetch('/api/products', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(productData)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al agregar producto');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Producto agregado:', data);
                    document.getElementById('productForm').reset();
                    fetchProductsAndUpdateList(currentPage);
                    socket.emit('productCreated');
                })
                .catch(error => console.error('Error al agregar producto:', error));
        });

        document.addEventListener('DOMContentLoaded', () => {
            fetchProductsAndUpdateList();
            fetchCartProductsAndUpdateList();
        });

        socket.on('productCreated', () => {
            fetchProductsAndUpdateList(currentPage);
        });

        socket.on('productDeleted', () => {
            fetchProductsAndUpdateList(currentPage);
        });

    </script>
</body>

</html>